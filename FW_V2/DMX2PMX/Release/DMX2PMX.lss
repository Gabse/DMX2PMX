
AVRASM ver. 2.2.7  C:\Users\gabse\Documents\Projekte\DMX2PMX\FW_V2\DMX2PMX\main.asm Tue Jul 06 22:10:16 2021

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATtiny_DFP\1.8.332\avrasm\inc\tn1634def.inc'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATtiny_DFP\1.8.332\avrasm\inc\tn1634def.inc'
                                 
                                 //
                                 
                                 ;***** Created: 2011-05-12 14:38 ******* Source: ATtiny1634.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "tn1634def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATtiny1634
                                 ;* Date              : 2011-05-12
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATtiny1634
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _TN1634DEF_INC_
                                 #define _TN1634DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATtiny1634
                                 #pragma AVRPART ADMIN PART_NAME ATtiny1634
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x94
                                 .equ	SIGNATURE_002	= 0x12
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2
                                 #pragma AVRPART CORE NEW_INSTRUCTIONS lpm rd,z+
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	TWSCRA	= 0x7f	; MEMORY MAPPED
                                 .equ	TWSCRB	= 0x7e	; MEMORY MAPPED
                                 .equ	TWSSRA	= 0x7d	; MEMORY MAPPED
                                 .equ	TWSA	= 0x7c	; MEMORY MAPPED
                                 .equ	TWSAM	= 0x7b	; MEMORY MAPPED
                                 .equ	TWSD	= 0x7a	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0x79	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0x78	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0x77	; MEMORY MAPPED
                                 .equ	UCSR1D	= 0x76	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0x74	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0x75	; MEMORY MAPPED
                                 .equ	UDR1	= 0x73	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x72	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x71	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x70	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x6e	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x6f	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x6c	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x6d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x6a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x6b	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x69	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x68	; MEMORY MAPPED
                                 .equ	GTCCR	= 0x67	; MEMORY MAPPED
                                 .equ	OSCCAL1	= 0x66	; MEMORY MAPPED
                                 .equ	OSCTCAL0B	= 0x65	; MEMORY MAPPED
                                 .equ	OSCTCAL0A	= 0x64	; MEMORY MAPPED
                                 .equ	OSCCAL0	= 0x63	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x62	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x61	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	GIMSK	= 0x3c
                                 .equ	GIFR	= 0x3b
                                 .equ	TIMSK	= 0x3a
                                 .equ	TIFR	= 0x39
                                 .equ	QTCSR	= 0x38
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x36
                                 .equ	MCUSR	= 0x35
                                 .equ	PRR	= 0x34
                                 .equ	CLKPR	= 0x33
                                 .equ	CLKSR	= 0x32
                                 .equ	WDTCSR	= 0x30
                                 .equ	CCP	= 0x2f
                                 .equ	DWDR	= 0x2e
                                 .equ	USIBR	= 0x2d
                                 .equ	USIDR	= 0x2c
                                 .equ	USISR	= 0x2b
                                 .equ	USICR	= 0x2a
                                 .equ	PCMSK2	= 0x29
                                 .equ	PCMSK1	= 0x28
                                 .equ	PCMSK0	= 0x27
                                 .equ	UCSR0A	= 0x26
                                 .equ	UCSR0B	= 0x25
                                 .equ	UCSR0C	= 0x24
                                 .equ	UCSR0D	= 0x23
                                 .equ	UBRR0L	= 0x21
                                 .equ	UBRR0H	= 0x22
                                 .equ	UDR0	= 0x20
                                 .equ	EEAR	= 0x1e
                                 .equ	EEDR	= 0x1d
                                 .equ	EECR	= 0x1c
                                 .equ	TCCR0A	= 0x1b
                                 .equ	TCCR0B	= 0x1a
                                 .equ	TCNT0	= 0x19
                                 .equ	OCR0A	= 0x18
                                 .equ	OCR0B	= 0x17
                                 .equ	GPIOR2	= 0x16
                                 .equ	GPIOR1	= 0x15
                                 .equ	GPIOR0	= 0x14
                                 .equ	PORTCR	= 0x13
                                 .equ	PUEA	= 0x12
                                 .equ	PORTA	= 0x11
                                 .equ	DDRA	= 0x10
                                 .equ	PINA	= 0x0f
                                 .equ	PUEB	= 0x0e
                                 .equ	PORTB	= 0x0d
                                 .equ	DDRB	= 0x0c
                                 .equ	PINB	= 0x0b
                                 .equ	PUEC	= 0x0a
                                 .equ	PORTC	= 0x09
                                 .equ	DDRC	= 0x08
                                 .equ	PINC	= 0x07
                                 .equ	ACSRA	= 0x06
                                 .equ	ACSRB	= 0x05
                                 .equ	ADMUX	= 0x04
                                 .equ	ADCSRA	= 0x03
                                 .equ	ADCSRB	= 0x02
                                 .equ	ADCH	= 0x01
                                 .equ	ADCL	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** TWI **************************
                                 ; TWSCRA - TWI Slave Control Register A
                                 .equ	TWSME	= 0	; TWI Smart Mode Enable
                                 .equ	TWPME	= 1	; TWI Promiscuous Mode Enable
                                 .equ	TWSIE	= 2	; TWI Stop Interrupt Enable
                                 .equ	TWEN	= 3	; Two-Wire Interface Enable
                                 .equ	TWASIE	= 4	; TWI Address/Stop Interrupt Enable
                                 .equ	TWDIE	= 5	; TWI Data Interrupt Enable
                                 .equ	TWSHE	= 7	; TWI SDA Hold Time Enable
                                 
                                 ; TWSCRB - TWI Slave Control Register B
                                 .equ	TWCMD0	= 0	; 
                                 .equ	TWCMD1	= 1	; 
                                 .equ	TWAA	= 2	; TWI Acknowledge Action
                                 
                                 ; TWSSRA - TWI Slave Status Register A
                                 .equ	TWAS	= 0	; TWI Address or Stop
                                 .equ	TWDIR	= 1	; TWI Read/Write Direction
                                 .equ	TWBE	= 2	; TWI Bus Error
                                 .equ	TWC	= 3	; TWI Collision
                                 .equ	TWRA	= 4	; TWI Receive Acknowledge
                                 .equ	TWCH	= 5	; TWI Clock Hold
                                 .equ	TWASIF	= 6	; TWI Address/Stop Interrupt Flag
                                 .equ	TWDIF	= 7	; TWI Data Interrupt Flag.
                                 
                                 ; TWSA - TWI Slave Address Register
                                 .equ	TWSA0	= 0	; TWI slave address bit
                                 .equ	TWSA1	= 1	; TWI slave address bit
                                 .equ	TWSA2	= 2	; TWI slave address bit
                                 .equ	TWSA3	= 3	; TWI slave address bit
                                 .equ	TWSA4	= 4	; TWI slave address bit
                                 .equ	TWSA5	= 5	; TWI slave address bit
                                 .equ	TWSA6	= 6	; TWI slave address bit
                                 .equ	TWSA7	= 7	; TWI slave address bit
                                 
                                 ; TWSD - TWI Slave Data Register
                                 .equ	TWSD0	= 0	; TWI slave data bit
                                 .equ	TWSD1	= 1	; TWI slave data bit
                                 .equ	TWSD2	= 2	; TWI slave data bit
                                 .equ	TWSD3	= 3	; TWI slave data bit
                                 .equ	TWSD4	= 4	; TWI slave data bit
                                 .equ	TWSD5	= 5	; TWI slave data bit
                                 .equ	TWSD6	= 6	; TWI slave data bit
                                 .equ	TWSD7	= 7	; TWI slave data bit
                                 
                                 ; TWSAM - TWI Slave Address Mask Register
                                 .equ	TWAE	= 0	; TWI Address Enable
                                 .equ	TWSAM1	= 1	; TWI Address Mask Bit 1
                                 .equ	TWSAM2	= 2	; TWI Address Mask Bit 2
                                 .equ	TWSAM3	= 3	; TWI Address Mask Bit 3
                                 .equ	TWSAM4	= 4	; TWI Address Mask Bit 4
                                 .equ	TWSAM5	= 5	; TWI Address Mask Bit 5
                                 .equ	TWSAM6	= 6	; TWI Address Mask Bit 6
                                 .equ	TWSAM7	= 7	; TWI Address Mask Bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTCR - Port Control Register
                                 .equ	BBMB	= 1	; Break-Before-Make Mode Enable
                                 
                                 ; PUEB - Pull-up Enable Control Register
                                 .equ	PUEB0	= 0	; 
                                 .equ	PUEB1	= 1	; 
                                 .equ	PUEB2	= 2	; 
                                 .equ	PUEB3	= 3	; 
                                 
                                 ; PORTB - Input Pins, Port B
                                 .equ	PORTB0	= 0	; 
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; 
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; 
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; 
                                 .equ	PB3	= 3	; For compatibility
                                 
                                 ; DDRB - Data Direction Register, Port B
                                 .equ	DDB0	= 0	; 
                                 .equ	DDB1	= 1	; 
                                 .equ	DDB2	= 2	; 
                                 .equ	DDB3	= 3	; 
                                 
                                 ; PINB - Port B Data register
                                 .equ	PINB0	= 0	; 
                                 .equ	PINB1	= 1	; 
                                 .equ	PINB2	= 2	; 
                                 .equ	PINB3	= 3	; 
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTCR - Port Control Register
                                 .equ	BBMC	= 2	; Break-Before-Make Mode Enable
                                 
                                 ; PUEC - Pull-up Enable Control Register
                                 .equ	PUEC0	= 0	; 
                                 .equ	PUEC1	= 1	; 
                                 .equ	PUEC2	= 2	; 
                                 .equ	PUEC3	= 3	; 
                                 .equ	PUEC4	= 4	; 
                                 .equ	PUEC5	= 5	; 
                                 
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; 
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; 
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; 
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; 
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; 
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; 
                                 .equ	PC5	= 5	; For compatibility
                                 
                                 ; DDRC - Data Direction Register, Port C
                                 .equ	DDC0	= 0	; 
                                 .equ	DDC1	= 1	; 
                                 .equ	DDC2	= 2	; 
                                 .equ	DDC3	= 3	; 
                                 .equ	DDC4	= 4	; 
                                 .equ	DDC5	= 5	; 
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; 
                                 .equ	PINC1	= 1	; 
                                 .equ	PINC2	= 2	; 
                                 .equ	PINC3	= 3	; 
                                 .equ	PINC4	= 4	; 
                                 .equ	PINC5	= 5	; 
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTCR - Port Control Register
                                 .equ	BBMA	= 0	; Break-Before-Make Mode Enable
                                 
                                 ; PUEA - Pull-up Enable Control Register
                                 .equ	PUEA0	= 0	; 
                                 .equ	PUEA1	= 1	; 
                                 .equ	PUEA2	= 2	; 
                                 .equ	PUEA3	= 3	; 
                                 .equ	PUEA4	= 4	; 
                                 .equ	PUEA5	= 5	; 
                                 .equ	PUEA6	= 6	; 
                                 .equ	PUEA7	= 7	; 
                                 
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; 
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; 
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; 
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; 
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; 
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; 
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; 
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; 
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Data Direction Register, Port A
                                 .equ	DDA0	= 0	; 
                                 .equ	DDA1	= 1	; 
                                 .equ	DDA2	= 2	; 
                                 .equ	DDA3	= 3	; 
                                 .equ	DDA4	= 4	; 
                                 .equ	DDA5	= 5	; 
                                 .equ	DDA6	= 6	; 
                                 .equ	DDA7	= 7	; 
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; 
                                 .equ	PINA1	= 1	; 
                                 .equ	PINA2	= 2	; 
                                 .equ	PINA3	= 3	; 
                                 .equ	PINA4	= 4	; 
                                 .equ	PINA5	= 5	; 
                                 .equ	PINA6	= 6	; 
                                 .equ	PINA7	= 7	; 
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	REFS0	= 6	; Reference Selection Bit
                                 .equ	REFS1	= 7	; Reference Selection Bit
                                 
                                 ; ADCSRA - The ADC Control and Status register
                                 .equ	ADPS0	= 0	; ADC Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source 2
                                 .equ	ADLAR	= 3	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register 2
                                 .equ	ADC9D	= 0	; ADC9 Digital input Disable
                                 .equ	ADC10D	= 1	; ADC10 Digital input Disable
                                 .equ	ADC11D	= 2	; ADC11 Digital input Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	ADC5D	= 0	; ADC5 Digital input Disable
                                 .equ	ADC6D	= 1	; ADC6 Digital input Disable
                                 .equ	ADC7D	= 2	; ADC7 Digital input Disable
                                 .equ	ADC8D	= 3	; ADC8 Digital Input Disable
                                 
                                 ; DIDR0 - Digital Input Disable Register 0
                                 .equ	AREFD	= 0	; AREF Digital input Disable
                                 .equ	AIN0D	= 1	; AIN0 Digital input Disable
                                 .equ	AIN1D	= 2	; AIN1 Digital input Disable
                                 .equ	ADC0D	= 3	; ADC0 Digital Input Disable
                                 .equ	ADC1D	= 4	; ADC1 Digital input Disable
                                 .equ	ADC2D	= 5	; ADC2 Digital input Disable
                                 .equ	ADC3D	= 6	; ADC3 Digital input Disable
                                 .equ	ADC4D	= 7	; ADC4 Digital input Disable
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSRA - Analog Comparator Control And Status Register A
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; ACSRB - Analog Comparator Control And Status Register B
                                 .equ	ACME	= 2	; Analog Comparator Multiplexer Enable
                                 .equ	HLEV	= 6	; Hysteresis Level
                                 .equ	HSEL	= 7	; Hysteresis Select
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEAR - EEPROM Read/Write Access
                                 .equ	EEARL	= EEAR	; For compatibility
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEWE	= EEPE	; For compatibility
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EEMWE	= EEMPE	; For compatibility
                                 .equ	EERIE	= 3	; EEProm Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	ICIE1	= 3	; Timer/Counter1 Input Capture Interrupt Enable
                                 .equ	TICIE	= ICIE1	; For compatibility
                                 .equ	OCIE1B	= 5	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	OCIE1A	= 6	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	TOIE1	= 7	; Timer/Counter1 Overflow Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	ICF1	= 3	; Input Capture Flag 1
                                 .equ	OCF1B	= 5	; Output Compare Flag 1B
                                 .equ	OCF1A	= 6	; Output Compare Flag 1A
                                 .equ	TOV1	= 7	; Timer/Counter1 Overflow Flag
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Pulse Width Modulator Select Bit 0
                                 .equ	PWM10	= WGM10	; For compatibility
                                 .equ	WGM11	= 1	; Pulse Width Modulator Select Bit 1
                                 .equ	PWM11	= WGM11	; For compatibility
                                 .equ	COM1B0	= 4	; Comparet Ouput Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Clock Select bit 0
                                 .equ	CS11	= 1	; Clock Select 1 bit 1
                                 .equ	CS12	= 2	; Clock Select1 bit 2
                                 .equ	WGM12	= 3	; Waveform Generation Mode Bit 2
                                 .equ	CTC1	= WGM12	; For compatibility
                                 .equ	WGM13	= 4	; Waveform Generation Mode Bit 3
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; Force Output Compare for Channel B
                                 .equ	FOC1A	= 7	; Force Output Compare for Channel A
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK - Timer/Counter Interrupt Mask Register
                                 .equ	OCIE0A	= 0	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	TOIE0	= 1	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR - Timer/Counter Interrupt Flag register
                                 .equ	OCF0A	= 0	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	TOV0	= 1	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0_0	= 0	; 
                                 .equ	OCR0_1	= 1	; 
                                 .equ	OCR0_2	= 2	; 
                                 .equ	OCR0_3	= 3	; 
                                 .equ	OCR0_4	= 4	; 
                                 .equ	OCR0_5	= 5	; 
                                 .equ	OCR0_6	= 6	; 
                                 .equ	OCR0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Match Output B Mode
                                 .equ	COM0B1	= 5	; Compare Match Output B Mode
                                 .equ	COM0A0	= 6	; Compare Match Output A Mode
                                 .equ	COM0A1	= 7	; Compare Match Output A Mode
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	TCCR0	= TCCR0B	; For compatibility
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare B
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; PCMSK2 - Pin Change Mask Register 1
                                 .equ	PCINT12	= 0	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 1	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 2	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 3	; Pin Change Enable Mask 15
                                 .equ	PCINT16	= 4	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 5	; Pin Change Enable Mask 17
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; GIFR - General Interrupt Flag Register
                                 .equ	PCIF0	= 3	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 4	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 5	; Pin Change Interrupt Flag 2
                                 .equ	INTF0	= 6	; External Interrupt Flag 0
                                 
                                 ; GIMSK - General Interrupt Mask Register
                                 .equ	PCIE0	= 3	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 4	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 5	; Pin Change Interrupt Enable 2
                                 .equ	INT0	= 6	; External Interrupt Request 0 Enable
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	ISC00	= 0	; Interrupt Sense Control 0 bit 0
                                 .equ	ISC01	= 1	; Interrupt Sense Control 0 bit 1
                                 .equ	SE	= 4	; Sleep Enable
                                 .equ	SM0	= 5	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 6	; Sleep Mode Select Bit 1
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; OSCCAL0 - Oscillator Calibration Value
                                 .equ	CAL00	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL01	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL02	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL03	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL04	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL05	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL06	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL07	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; OSCCAL1 - 
                                 .equ	CAL10	= 0	; 
                                 .equ	CAL11	= 1	; 
                                 
                                 ; OSCTCAL0A - 
                                 .equ	TCAL0A0	= 0	; 
                                 .equ	TCAL0A1	= 1	; 
                                 .equ	TCAL0A2	= 2	; 
                                 .equ	TCAL0A3	= 3	; 
                                 .equ	TCAL0A4	= 4	; 
                                 .equ	TCAL0A5	= 5	; 
                                 .equ	TCAL0A6	= 6	; 
                                 .equ	TCAL0A7	= 7	; 
                                 
                                 ; OSCTCAL0B - 
                                 .equ	TCAL0B0	= 0	; 
                                 .equ	TCAL0B1	= 1	; 
                                 .equ	TCAL0B2	= 2	; 
                                 .equ	TCAL0B3	= 3	; 
                                 .equ	TCAL0B4	= 4	; 
                                 .equ	TCAL0B5	= 5	; 
                                 .equ	TCAL0B6	= 6	; 
                                 .equ	TCAL0B7	= 7	; 
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART 0
                                 .equ	PRUSART1	= 2	; Power Reduction USART 1
                                 .equ	PRUSI	= 3	; Power Reduction USI
                                 .equ	PRTIM0	= 4	; Power Reduction Timer/Counter0
                                 .equ	PRTIM1	= 5	; Power Reduction Timer/Counter1
                                 .equ	PRTWI	= 6	; Power Reduction TWI
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 
                                 ; CLKSR - Clock Setting Register
                                 .equ	CKSEL0	= 0	; Clock Select Bit 0
                                 .equ	CKSEL1	= 1	; Clock Select Bit 1
                                 .equ	CKSEL2	= 2	; Clock Select Bit 2
                                 .equ	CKSEL3	= 3	; Clock Select Bit 3
                                 .equ	SUT	= 4	; Start-up Time
                                 .equ	CKOUT_IO	= 5	; Clock Output (active low)
                                 .equ	CSTR	= 6	; Clock Switch Trigger
                                 .equ	OSCRDY	= 7	; Oscillator Ready
                                 
                                 ; CCP - Configuration Change Protection
                                 .equ	CCP0	= 0	; Configuration Change Protection bit 0
                                 .equ	CCP1	= 1	; Configuration Change Protection bit 1
                                 .equ	CCP2	= 2	; Configuration Change Protection bit 2
                                 .equ	CCP3	= 3	; Configuration Change Protection bit 3
                                 .equ	CCP4	= 4	; Configuration Change Protection bit 4
                                 .equ	CCP5	= 5	; Configuration Change Protection bit 5
                                 .equ	CCP6	= 6	; Configuration Change Protection bit 6
                                 .equ	CCP7	= 7	; Configuration Change Protection bit 7
                                 
                                 
                                 ; ***** USI **************************
                                 ; USIBR - USI Buffer Register
                                 .equ	USIBR0	= 0	; USI Buffer Register bit 0
                                 .equ	USIBR1	= 1	; USI Buffer Register bit 1
                                 .equ	USIBR2	= 2	; USI Buffer Register bit 2
                                 .equ	USIBR3	= 3	; USI Buffer Register bit 3
                                 .equ	USIBR4	= 4	; USI Buffer Register bit 4
                                 .equ	USIBR5	= 5	; USI Buffer Register bit 5
                                 .equ	USIBR6	= 6	; USI Buffer Register bit 6
                                 .equ	USIBR7	= 7	; USI Buffer Register bit 7
                                 
                                 ; USIDR - USI Data Register
                                 .equ	USIDR0	= 0	; USI Data Register bit 0
                                 .equ	USIDR1	= 1	; USI Data Register bit 1
                                 .equ	USIDR2	= 2	; USI Data Register bit 2
                                 .equ	USIDR3	= 3	; USI Data Register bit 3
                                 .equ	USIDR4	= 4	; USI Data Register bit 4
                                 .equ	USIDR5	= 5	; USI Data Register bit 5
                                 .equ	USIDR6	= 6	; USI Data Register bit 6
                                 .equ	USIDR7	= 7	; USI Data Register bit 7
                                 
                                 ; USISR - USI Status Register
                                 .equ	USICNT0	= 0	; USI Counter Value Bit 0
                                 .equ	USICNT1	= 1	; USI Counter Value Bit 1
                                 .equ	USICNT2	= 2	; USI Counter Value Bit 2
                                 .equ	USICNT3	= 3	; USI Counter Value Bit 3
                                 .equ	USIDC	= 4	; Data Output Collision
                                 .equ	USIPF	= 5	; Stop Condition Flag
                                 .equ	USIOIF	= 6	; Counter Overflow Interrupt Flag
                                 .equ	USISIF	= 7	; Start Condition Interrupt Flag
                                 
                                 ; USICR - USI Control Register
                                 .equ	USITC	= 0	; Toggle Clock Port Pin
                                 .equ	USICLK	= 1	; Clock Strobe
                                 .equ	USICS0	= 2	; USI Clock Source Select Bit 0
                                 .equ	USICS1	= 3	; USI Clock Source Select Bit 1
                                 .equ	USIWM0	= 4	; USI Wire Mode Bit 0
                                 .equ	USIWM1	= 5	; USI Wire Mode Bit 1
                                 .equ	USIOIE	= 6	; Counter Overflow Interrupt Enable
                                 .equ	USISIE	= 7	; Start Condition Interrupt Enable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UCSR0D - USART Control and Status Register D
                                 .equ	SFDE0	= 5	; USART RX Start Frame Detection Enable
                                 .equ	RXS0	= 6	; USART RX Start Flag
                                 .equ	RXS	= RXS0	; For compatibility
                                 .equ	RXSIE0	= 7	; USART RX Start Interrupt Enable
                                 .equ	RXSIE	= RXSIE0	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UCSR1D - USART Control and Status Register D
                                 .equ	SFDE1	= 5	; USART RX Start Frame Detection Enable
                                 .equ	RXS1	= 6	; USART RX Start Flag
                                 ;.equ	RXS	= RXS1	; For compatibility
                                 .equ	RXSIE1	= 7	; USART RX Start Interrupt Enable
                                 ;.equ	RXSIE	= RXSIE1	; For compatibility
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control and Status Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timer Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timer Interrupt Flag
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lockbit
                                 .equ	LB2	= 1	; Lockbit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 ;.equ	CKSEL0	= 0	; Select Clock Source
                                 ;.equ	CKSEL1	= 1	; Select Clock Source
                                 ;.equ	CKSEL2	= 2	; Select Clock Source
                                 ;.equ	CKSEL3	= 3	; Select Clock Source
                                 ;.equ	SUT	= 4	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	SELFPRGEN	= 0	; Self Programming Enable
                                 .equ	BODACT0	= 1	; Brown-out detector mode
                                 .equ	BODACT1	= 2	; Brown-out detector mode
                                 .equ	BODPD0	= 3	; Brown-out detector mode
                                 .equ	BODPD1	= 4	; Brown-out detector mode
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 1024
                                 .equ	RAMEND	= 0x04ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x00ff
                                 .equ	EEPROMEND	= 0x00ff
                                 .equ	EEADRBITS	= 8
                                 #pragma AVRPART MEMORY PROG_FLASH 16384
                                 #pragma AVRPART MEMORY EEPROM 256
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 1024
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x0
                                 .equ	NRWW_STOP_ADDR	= 0x1fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x0
                                 .equ	PAGESIZE	= 16
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	PCI0addr	= 0x0004	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0006	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0008	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x000a	; Watchdog Time-out Interrupt
                                 .equ	ICP1addr	= 0x000c	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x000e	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0010	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x0012	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x0014	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x0016	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0018	; Timer/Couner0 Overflow
                                 .equ	ACIaddr	= 0x001a	; Analog Comparator
                                 .equ	ADCCaddr	= 0x001c	; ADC Conversion Complete
                                 .equ	USART0__STARTaddr	= 0x001e	; USART0, Start
                                 .equ	URXC0addr	= 0x0020	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0022	; USART0 Data Register Empty
                                 .equ	UTXC0addr	= 0x0024	; USART0, Tx Complete
                                 .equ	USART1__STARTaddr	= 0x0026	; USART1, Start
                                 .equ	URXC1addr	= 0x0028	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x002a	; USART1 Data Register Empty
                                 .equ	UTXC1addr	= 0x002c	; USART1, Tx Complete
                                 .equ	USI_STARTaddr	= 0x002e	; USI Start Condition
                                 .equ	USI_OVFaddr	= 0x0030	; USI Overflow
                                 .equ	TWIaddr	= 0x0032	; Two-wire Serial Interface
                                 .equ	ERDYaddr	= 0x0034	; EEPROM Ready
                                 .equ	QTRIPaddr	= 0x0036	; Touch Sensing
                                 
                                 .equ	INT_VECTORS_SIZE	= 56	; size in words
                                 
                                 #endif  /* _TN1634DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 //
                                 //
                                 //		8888888b.  888b     d888 Y88b   d88P  .d8888b.  8888888b.  888b     d888 Y88b   d88P 
                                 //		888  "Y88b 8888b   d8888  Y88b d88P  d88P  Y88b 888   Y88b 8888b   d8888  Y88b d88P  
                                 //		888    888 88888b.d88888   Y88o88P          888 888    888 88888b.d88888   Y88o88P   
                                 //		888    888 888Y88888P888    Y888P         .d88P 888   d88P 888Y88888P888    Y888P    
                                 //		888    888 888 Y888P 888    d888b     .od888P"  8888888P"  888 Y888P 888    d888b    
                                 //		888    888 888  Y8P  888   d88888b   d88P"      888        888  Y8P  888   d88888b   
                                 //		888  .d88P 888   "   888  d88P Y88b  888"       888        888   "   888  d88P Y88b  
                                 //		8888888P"  888       888 d88P   Y88b 888888888  888        888       888 d88P   Y88b 
                                 //
                                 //
                                 //***********************************************************************************************                                                                                
                                 //                                                                                    
                                 //								   DMX512 to Dual PMX Converter                                                                                   
                                 //										   Version: 1.0
                                 //									  Build date: 05.04.2020
                                 //										  Author: Gabs'e
                                 //										File: main.asm
                                 //								   Target MCU: Microchip ATtiny1634
                                 //										Licence: CC BY-NC-SA 
                                 //								PMX Protocoll Description: https://www.claypaky.it/media/documents/Pulsar_RS232-423(PMX)_SerialDataProtocol_EN.pdf
                                 //
                                 //***********************************************************************************************
                                 //
                                 //	Attiny Pinout:
                                 //					ADDRESS SW = 0-7= PORTA
                                 //					PMX1	= UART0	= PB0
                                 //					DMX		= UART1 = PB1
                                 //					PMX2	= USI	= PB2
                                 //					ADDRESS SW	= 8	= PB3
                                 //					PMX CLOCK	= PC0&PC1
                                 //					LED		= LED	= PC2
                                 //
                                 //	Fuse Settings: 
                                 //						EXTENDED:	0xF5
                                 //						HIGH:		0xD4
                                 //						LOW:		0xCF
                                 //					
                                 //
                                 //	Changelog:	
                                 //				V0.0..........Fork from DMX2SGM
                                 //				V1.0..........First Release
                                 //
                                 //
                                 //***********************************************************************************************
                                 
                                 .equ F_CPU = 12000000							// CPU Clock
                                 .equ NUM_CH= 24									// Number of PMX Channels per Output. Maximal 120. Keep value as low as possible for faster response. (Updating all 120 channel takes 0,25s in 7 bit mode & up to 0,375s in 8 bit mode)
                                 .equ PMXMODE= 7									// PMX bit mode. Either 7 or 8 bit mode. Use 7 bit mode for ClayPacky Golden Scan 1 exclusively. Use 8 Bit mode for all other fixtures and for a mix of both.
                                 
                                 
                                 //********************************Registers*********************************
                                 
                                 .def DMX_ADDRESS_L	=	R0						// Register for DIP DMX address LSB
                                 .def DMX_ADDRESS_H	=	R1						// Register for DIP DMX address MSB
                                 .def DMX_ADDRESS_L_C=	R2						// Register for DIP DMX address LSB compare value
                                 .def DMX_ADDRESS_H_C=	R3						// Register for DIP DMX address MSB compare value
                                 .def DMX_BYTE_H		=	R4						// Register for last DMX byte number MSB
                                 .def DMX_BYTE_L		=	R5						// Register for last DMX byte number LSB
                                 .def DMX_DATA		=	R6						// Register for current DMX byte
                                 .def PMX1_DATA		=	R7						// Register for PMX1 data RAM address
                                 .def PMX2_DATA		=	R8						// Register for PMX2 data RAM address
                                 .def PMX_8TH_BIT	=	R9						// Register for 8th bit content in 8 bit PMX Mode
                                 .def S_SREG			=	R10						// Register to restore the SREG after Interrupts
                                 .def PMX1_LAST		=	R11						// Register for last changed PMX1 channel
                                 .def PMX2_LAST		=	R12						// Register for last changed PMX2 channel
                                 
                                 .def FLAGS			=	R16						// Register for general status flags
                                 .def PMX_FLAGS		=	R17						// Register for PMX status flags
                                 .def PMX1_ADDRESS	=	R18						// Register for PMX1 address
                                 .def PMX2_ADDRESS	=	R19						// Register for PMX2 address
                                 .def PMX1_REFRESH_C	=	R20						// Register for PMX1 refresh counter
                                 .def PMX2_REFRESH_C	=	R21						// Register for PMX2 refresh counter
                                 .def PMX_COUNTER	=	R22						// Register for compared PMX byte counter
                                 .def TEMP_I			=	R23						// Register for temporary values during interrupts
                                 .def TEMP			=	R24						// Register for temporary values in the main loop
                                 .def USI_DAT		=	R25						// Register for USI data
                                 // MAIN_ADRESS		=	X => R26 & R27			// Address pointer for main Loop
                                 // PMX_ADDRESS		=	Y => R28 & R29			// Address pointer for PMX interrupts
                                 // DMX_ADDRESS		=	Z => R30 & R31			// Address pointer for DMX interrupt
                                 
                                 
                                 //******************************General FLAGS*******************************
                                 
                                 .equ DSNB			=	0						// DMX Skip Next Byte
                                 .equ DRSB			=	1						// DMX Read Start Byte
                                 .equ LEDT			=	2						// LED Toggle
                                 .equ USIS			=	3						// USI State
                                 
                                 
                                 //********************************PMX FLAGS*********************************
                                 
                                 .equ UPX1			=	0						// Update PMX1
                                 .equ AOD1			=	1						// Address or Data Byte PMX1
                                 .equ PAGE1			=	2						// Send Page PMX1
                                 .equ BYTE81			=	3						// Send 8th Byte PMX1
                                 
                                 .equ UPX2			=	4						// Update PMX2
                                 .equ AOD2			=	5						// Address or Data Byte PMX2
                                 .equ PAGE2			=	6						// Send Page PMX2
                                 .equ BYTE82			=	7						// Send 8th Byte PMX2
                                 
                                 
                                 //*****************************Interrupt Vectors*****************************
                                 
                                 .org 0x0000
000000 c030                      	RJMP MAIN									// Jump to MAIN on program start
                                 
                                 .org OC1Aaddr
00000e c0e3                      	RJMP TC1CMA									// Jump to TC1CMA on OC1Aaddr interrupt
                                 
                                 .org UDRE0addr
000022 c101                      	RJMP PMX1_INTERRUPT							// Jump to PMX1_INTERRUPT on UDRE0addr interrupt
                                 
                                 .org URXC1addr
000028 c0d0                      	RJMP DMX_INTERRUPT							// Jump to DMX_INTERRUPT on URXC1addr interrupt
                                 
                                 .org USI_OVFaddr
000030 c105                      	RJMP PMX2_INTERRUPT							// Jump to PMX2_INTERRUPT on USI_OVFaddr interrupt
                                 
                                 
                                 //*****************************Init Controller******************************
                                 main:
                                 
                                 	// Clear work registers
000031 2400                      	CLR R0										// Clear register 0
000032 2411                      	CLR R1										// Clear register 1
000033 2422                      	CLR R2										// Clear register 2
000034 2433                      	CLR R3										// Clear register 3
000035 2444                      	CLR R4										// Clear register 4
000036 2455                      	CLR R5										// Clear register 5
000037 2466                      	CLR R6										// Clear register 6
000038 2477                      	CLR R7										// Clear register 7
000039 2488                      	CLR R8										// Clear register 8
00003a 2499                      	CLR R9										// Clear register 9
00003b 24aa                      	CLR R10										// Clear register 10
00003c 24bb                      	CLR R11										// Clear register 11
00003d 24cc                      	CLR R12										// Clear register 12
00003e 24dd                      	CLR R13										// Clear register 13
00003f 24ee                      	CLR R14										// Clear register 14
000040 24ff                      	CLR R15										// Clear register 15
000041 2700                      	CLR R16										// Clear register 16
000042 2711                      	CLR R17										// Clear register 17
000043 2722                      	CLR R18										// Clear register 18
000044 2733                      	CLR R19										// Clear register 19
000045 2744                      	CLR R20										// Clear register 20
000046 2755                      	CLR R21										// Clear register 21
000047 2766                      	CLR R22										// Clear register 22
000048 2777                      	CLR R23										// Clear register 23
000049 2788                      	CLR R24										// Clear register 24
00004a 2799                      	CLR R25										// Clear register 25
00004b 27aa                      	CLR R26										// Clear register 26
00004c 27bb                      	CLR R27										// Clear register 27
00004d 27cc                      	CLR R28										// Clear register 28
00004e 27dd                      	CLR R29										// Clear register 29
00004f 27ee                      	CLR R30										// Clear register 30
000050 27ff                      	CLR R31										// Clear register 31
                                 
                                 	// Init Stack Pointer
000051 ef8f                      	LDI	TEMP,	LOW(RAMEND)						// Init StackPointer to end of RAM
000052 bf8d                      	OUT	SPL,	TEMP							// Init StackPointer to end of RAM
000053 e084                      	LDI	TEMP,	HIGH(RAMEND)					// Init StackPointer to end of RAM
000054 bf8e                      	OUT	SPH,	TEMP							// Init StackPointer to end of RAM
                                 
                                 	// Init RAM
000055 2788                      	CLR TEMP									// Clear TEMP
000056 e0e0                      	LDI ZL,	LOW(SRAM_START)						// Set Z pointer LSB to Start of RAM
000057 e0f1                      	LDI ZH,	HIGH(SRAM_START)					// Set Z pointer MSB to Start of RAM
                                 
                                 clr_ram:
000058 9381                      	ST Z+,	TEMP								// Copy TEMP to RAM and increment Z pointer
000059 30e0                      	CPI ZL,	LOW(RAMEND+1)						// Check if End of RAM reached
00005a f7e9                      		BRNE clr_ram								// Jump to clr_ram if End of RAM was not reached
00005b 30f5                      	CPI ZH,	HIGH(RAMEND+1)						// Check if End of RAM reachedd
00005c f7d9                      		BRNE clr_ram								// Jump to clr_ram if End of RAM was not reached
                                 	
                                 
                                 //*****************************Init USI for PMX2****************************
                                 	
00005d e588                      	LDI TEMP,	1<<USIOIE | 1<<USIWM0 | 1<<USICS1// Set USI to 3Wire mode, clock from PC1 & interrupt on USI overflow
00005e bd8a                      	OUT USICR,	TEMP							// Set USI to 3Wire mode, clock from PC1 & interrupt on USI overflow
00005f ef8f                      	SER TEMP									// Set USI output to 1
000060 bd8c                      	OUT USIDR,	TEMP							// Set USI output to 1
000061 e488                      	LDI TEMP,	1<<USIOIF | 8					// Reset USI Overflow Flag & Set USI Counter to 8 offsetting the PMX Interrupts against each other
000062 bd8b                      	OUT USISR,	TEMP							// Reset USI Overflow Flag & Set USI Counter to 8 offsetting the PMX Interrupts against each other
000063 9a62                      	SBI DDRB,	PB2								// Set PMX2 pin to output
000064 e188                      	LDI TEMP,	NUM_CH							// Load number of channels into TEMP
000065 2ec8                      	MOV PMX2_LAST,	TEMP						// Copy number of channels into PMX2_LAST
                                 
                                 
                                 //**************************Init USART0 for PMX1****************************
                                 
000066 e486                      	LDI TEMP,	1<<UCSZ00 | 1<<UCSZ01 | 1<<UMSEL00// Set USART to Synchronous mode & 8 data bits (Synchronous mode allows reuse of the USART clock generator for the USI)
000067 bd84                      	OUT UCSR0C, TEMP							// Set USART to Synchronous mode & 8 data bits (Synchronous mode allows reuse of the USART clock generator for the USI)
000068 e288                      	LDI TEMP,	1<<UDRIE0 | 1<<TXEN0			// Enable USART 0 transmitt & TX complete interrupt
000069 bd85                      	OUT UCSR0B, TEMP							// Enable USART 0 transmitt & TX complete interrupt	
00006a e082                      	LDI TEMP,	HIGH ((F_CPU/(9600*2))-1)		// Set USART 0 baud register MSB to 9600Hz
00006b bd82                      	OUT UBRR0H, TEMP							// Set USART 0 baud register MSB to 9600Hz
00006c e780                      	LDI TEMP,	LOW ((F_CPU/(9600*2))-1)		// Set USART 0 baud register LSB to 9600Hz
00006d bd81                      	OUT UBRR0L, TEMP							// Set USART 0 baud register LSB to 9600Hz
00006e 9a40                      	SBI DDRC,	PC0								// Enable clock output
                                 	
                                 
                                 //****************************Init USART1 for DMX***************************
                                 
00006f e980                      	LDI TEMP,	1<<RXCIE1 | 1<<RXEN1			// Enable USART 1 recive & RX interrupt
000070 9380 0078                 	STS UCSR1B, TEMP							// Enable USART 1 recive & RX interrupt
000072 e08e                      	LDI TEMP,	1<<USBS1 | 1<<UCSZ11 | 1<<UCSZ10// Set USART 1 to 8 databits & 2 stopbits
000073 9380 0077                 	STS UCSR1C,	TEMP							// Set USART 1 to 8 databits & 2 stopbits
000075 e080                      	LDI TEMP,	HIGH ((F_CPU/(250000*16))-1)	// Set USART 1 baud register MSB to 250kHz
000076 9380 0075                 	STS UBRR1H, TEMP							// Set USART 1 baud register MSB to 250kHz
000078 e082                      	LDI TEMP,	LOW ((F_CPU/(250000*16))-1)		// Set USART 1 baud register LSB to 250kHz
000079 9380 0074                 	STS UBRR1L, TEMP							// Set USART 1 baud register LSB to 250kHz
00007b 9a71                      	SBI PUEB,	PB1								// Enable DMX pullup
                                 
                                 
                                 //******************************Init Timer for LED**************************
                                 
00007c e480                      	LDI TEMP,	1<<OCIE1A						// Enable Timer/Counter1 Compare Match A interrupt
00007d bf8a                      	OUT TIMSK,	TEMP							// Enable Timer/Counter1 Compare Match A interrupt	
00007e e081                      	LDI TEMP,	HIGH (((F_CPU/1024)/33)-1)		// Set Timer/Counter1 Compare Register A MSB to about 30ms (33Hz)
00007f 9380 006d                 	STS OCR1AH,	TEMP							// Set Timer/Counter1 Compare Register A MSB to about 30ms (33Hz)		
000081 e682                      	LDI TEMP,	LOW (((F_CPU/1024)/33)-1)		// Set Timer/Counter1 Compare Register A LSB to about 30ms (33Hz)
000082 9380 006c                 	STS OCR1AL,	TEMP							// Set Timer/Counter1 Compare Register A LSB to about 30ms (33Hz)
000084 2788                      	CLR TEMP									// Reset Timer/Counter1
000085 9380 006e                 	STS TCNT1L, TEMP							// Reset Timer/Counter1
000087 9380 006f                 	STS TCNT1H, TEMP							// Reset Timer/Counter1
000089 9380 0072                 	STS TCCR1A, TEMP							// Reset Timer/Counter1 Control Register A
00008b e08d                      	LDI TEMP,	1<<WGM12 | 1<<CS10 | 1<<CS12	// Set Timer/Counter1 Control Register B to Clear Timer on Compare A & Clock/1024
00008c 9380 0071                 	STS TCCR1B, TEMP							// Set Timer/Counter1 Control Register B to Clear Timer on Compare A & Clock/1024
00008e 9a42                      	SBI DDRC,	PC2								// Set LED pin to output
00008f 9a4a                      	SBI PORTC,	PC2								// Turn LED ON
                                 
                                 
                                 //******************************General Init********************************
                                 	
000090 e088                      	LDI TEMP,	1<<WDE							// Enable Watchdog Timer @ 16ms
000091 bf80                      	OUT WDTCSR,	TEMP							// Enable Watchdog Timer @ 16ms
000092 e080                      	LDI TEMP,	0x00							// Set PortA to input 
000093 bb80                      	OUT DDRA,	TEMP							// Set PortA to input 
000094 ef8f                      	LDI TEMP,	0xFF							// Enable PortA pullup
000095 bb82                      	OUT PUEA,	TEMP							// Enable PortA pullup
000096 9863                      	CBI DDRB,	PB3								// Set pin PB3 to input
000097 9a73                      	SBI PUEB,	PB3								// Enable pin PB3 pullup
000098 ef8f                      	SER TEMP									// Load TEMP with value for XOR
000099 b00b                      	IN DMX_ADDRESS_L,	PINB					// Read DMX address bit 8 from DIP switch
00009a 2608                      	EOR DMX_ADDRESS_L,	TEMP					// Invert register
00009b fa03                      	BST DMX_ADDRESS_L,	PB3						// Copy DMX address PB3 to T
00009c f810                      	BLD DMX_ADDRESS_H,	0						// Copy T to DMX_ADDRESS_H bit 0
00009d b00f                      	IN DMX_ADDRESS_L,	PINA					// Read DMX address bit 0-7 from DIP switch
00009e 2608                      	EOR DMX_ADDRESS_L,	TEMP					// Invert register
00009f e0b2                      	LDI XH,	0x02								// Set Main address MSB to 2
0000a0 e0d1                      	LDI YH, 0x01								// Set PMX address MSB to 1
0000a1 e0f1                      	LDI ZH, 0x01								// Set DMX address MSB to 1
                                 
                                 	.if PMXMODE == 8
                                 	.endif
                                 
0000a2 9478                      	SEI											// Enable global interrupts
                                 
                                 
                                 //********************************main loop*********************************
                                 loop:
                                 
                                 		// Check if PMX1 needs new data
0000a3 fd10                      		SBRC PMX_FLAGS,	UPX1					// Check if PMX1 update flag is clear
0000a4 c01f                      			RJMP PMX2								// Jump to PMX2 if flag is clear
0000a5 2766                      		CLR PMX_COUNTER							// Clear PMX_COUNTER
0000a6 2dab                      		MOV XL,	PMX1_LAST						// Copy last changed PMX 1 channel into XL
                                 
                                 	PMX1_CHECK:
                                 		// Check if all channels have been checked already. Refresh data if no channel has changed. 
0000a7 9563                      		INC PMX_COUNTER							// Increment PMX_COUNTER
0000a8 3169                      		CPI PMX_COUNTER, NUM_CH+1				// Check if all channels have been checked for update
0000a9 f081                      			BREQ PMX1_UPDATE						// Jump to PMX1_UPDATE if all channels have been checked, but no channel has changed
                                 
                                 		// Reset if XL is over NUM_CH
0000aa 31a7                      		CPI XL, NUM_CH-1						// Check if NUM_CH is reached (overflow)
0000ab f409                      			BRNE PMX1_CONT							// Jump to PMX1_CONT if not reached
0000ac efaf                      		LDI XL, 0xFF							// Clear XL if reached
                                 
                                 	PMX1_CONT:
                                 		// Check if data has changed. Jump back if no change has occoured. Write change into RAM @0x0200 + PMX1 Address. 
0000ad 95a3                      		INC XL									// Increment XL
0000ae 95ba                      		DEC XH									// Decrement pointer to memmory bank 0x01xx
0000af 912c                      		LD PMX1_ADDRESS,	X					// Load compare value from RAM
0000b0 95b3                      		INC XH									// Increment pointer to memmory bank 0x02xx
0000b1 918c                      		LD TEMP,	X							// Load data from RAM	
0000b2 1782                      		CP TEMP,	PMX1_ADDRESS				// Compare data bytes
0000b3 f399                      			BREQ PMX1_CHECK							// Jump to PMX1_CHECK if Data is equal
0000b4 932c                      		ST X,	PMX1_ADDRESS					// Store data back into RAM for next compare in data is not equal
0000b5 2f2a                      		MOV PMX1_ADDRESS,	XL					// Send page address
0000b6 2e7a                      		MOV PMX1_DATA,	XL						// Copy address to PMX1_DATA
0000b7 2eba                      		MOV PMX1_LAST,	XL						// Copy last transmit address into PMX1_LAST
0000b8 6011                      		SBR  PMX_FLAGS,	1<<UPX1					// Set Update PMX1 flag
0000b9 c00a                      		RJMP PMX2								// Jump to PMX2
                                 		
                                 	PMX1_UPDATE:
                                 		// Check if all channels have been refreshed, and send page
0000ba 9543                      		INC PMX1_REFRESH_C						// Increment PMX1_REFRESH_C
0000bb 3148                      		CPI PMX1_REFRESH_C,	NUM_CH				// Compare if all channels have been updated
0000bc f031                      			BREQ PMX1_PAGE							// Jump to PMX1_PAGE if all channels have been refreshed, and sending the page is pending
0000bd f008                      			BRLO PMX1_REFRESH						// Jump to PMX1_REFRESH if not every channel has been updated
0000be 2744                      		CLR PMX1_REFRESH_C						// Clear PMX1_REFRESH_C
                                 
                                 	PMX1_REFRESH:
                                 		// Send DataByte
0000bf 2f24                      		MOV PMX1_ADDRESS,	PMX1_REFRESH_C		// Copy PMX1_REFRESH_C to PMX1_ADDRESS
0000c0 2e74                      		MOV PMX1_DATA,	PMX1_REFRESH_C			// Copy PMX1_REFRESH_C to PMX1_DATA
0000c1 6011                      		SBR  PMX_FLAGS, 1<<UPX1					// Set Update PMX1 flag
0000c2 c001                      		RJMP PMX2								// Jump to PMX2
                                 
                                 	PMX1_PAGE:
                                 		// Send Page
0000c3 6015                      		SBR PMX_FLAGS,	1<<UPX1 | 1<<PAGE1		// Set Update PMX1 and Page PMX1 flag
                                 
                                 
                                 	PMX2:
                                 		// Check if PMX2 needs new data
0000c4 fd14                      		SBRC PMX_FLAGS,	UPX2					// Check if PMX2 update flag is clear
0000c5 c01f                      			RJMP CONTINUE							// Jump to CONTINUE if flag is clear
0000c6 2766                      		CLR PMX_COUNTER							// Clear PMX_COUNTER
0000c7 2dac                      		MOV XL,	PMX2_LAST						// Copy last changed PMX 2 channel into XL
                                 
                                 	PMX2_CHECK:
                                 		// Check if all channels have been checked already. Refresh data if no channel has changed. 
0000c8 9563                      		INC PMX_COUNTER							// Increment PMX_COUNTER
0000c9 3169                      		CPI PMX_COUNTER,	NUM_CH+1			// Check if all channels have been checked for update
0000ca f081                      			BREQ PMX2_UPDATE						// Jump to PMX2_UPDATE if all channels have been checked, but no channel has changed
                                 
                                 		// Reset if XL is over NUM_CH*2
0000cb 32af                      		CPI XL,	NUM_CH*2-1						// Check if NUM_CH is reached (overflow)
0000cc f409                      			BRNE PMX2_CONT							// Jump to PMX2_CONT if not reached
0000cd e1a7                      		LDI XL, NUM_CH-1							// Reset XL to NUM_CH if reached
                                 
                                 	PMX2_CONT:
                                 		// Check if data has changed. jump back if no change has occoured. Write change into RAM @0x0200 + PMX1 Address. 
0000ce 95a3                      		INC XL									// Increment XL
0000cf 95ba                      		DEC XH									// Decrement pointer to memmory bank 0x01xx
0000d0 913c                      		LD PMX2_ADDRESS,	X					// Load compare value from RAM
0000d1 95b3                      		INC XH									// Increment Pointer to memmory bank 0x02xx
0000d2 918c                      		LD TEMP,	X							// Load data from RAM	
0000d3 1783                      		CP TEMP,	PMX2_ADDRESS				// Compare data bytes
0000d4 f399                      			BREQ PMX2_CHECK							// Jump to PMX2_CHECK if data is equal
0000d5 933c                      		ST X,	PMX2_ADDRESS					// Store data back into RAM for next compare
0000d6 2f3a                      		MOV PMX2_ADDRESS,	XL					// Send page address
0000d7 2e8a                      		MOV PMX2_DATA,	XL						// Copy address to PMX2_DATA
0000d8 2eca                      		MOV PMX2_LAST,	XL						// Copy last transmit address into PMX2_LAST
0000d9 6110                      		SBR  PMX_FLAGS, 1<<UPX2					// Set Update PMX2 flag
0000da c00a                      		RJMP CONTINUE							// Jump to CONTINUE
                                 		
                                 	PMX2_UPDATE:
                                 		// Check if all channels have been refreshed, and send page
0000db 9553                      		INC PMX2_REFRESH_C						// Increment PMX2_REFRESH_C
0000dc 3350                      		CPI PMX2_REFRESH_C,	NUM_CH*2			// Compare if all channels have been updated
0000dd f031                      			BREQ PMX2_PAGE							// Jump to PMX2_PAGE if all channels have been refreshed, and sending the page is pending
0000de f008                      			BRLO PMX2_REFRESH						// Jump to PMX2_REFRESH if not every channel has been updated
0000df e158                      		LDI PMX2_REFRESH_C,	NUM_CH				// Clear PMX2_REFRESH_C and continue
                                 
                                 	PMX2_REFRESH:
                                 		// Send DataByte
0000e0 2f35                      		MOV PMX2_ADDRESS,	PMX2_REFRESH_C		// Copy PMX2_REFRESH_C to PMX2_ADDRESS
0000e1 2e85                      		MOV PMX2_DATA,		PMX2_REFRESH_C		// Copy PMX2_ADDRESS to PMX2_DATA
0000e2 6110                      		SBR  PMX_FLAGS,		1<<UPX2				// Set Update PMX2 flag
0000e3 c001                      		RJMP CONTINUE							// Jump to CONTINUE
                                 
                                 	PMX2_PAGE:
                                 		// Send Page
0000e4 6510                      		SBR PMX_FLAGS,	1<<UPX2 | 1<<PAGE2		// Set Update PMX2 and Page PMX2 flag
                                 
                                 
                                 	CONTINUE:
                                 		// Check if DIP switch address has changed, and force a device reset by not reseting the watchdog if address has changed.
0000e5 ef8f                      		SER TEMP								// Load TEMP with value for XOR
0000e6 b02b                      		IN DMX_ADDRESS_L_C,	PINB				// Read DMX address bit 8 from DIP switch
0000e7 2628                      		EOR DMX_ADDRESS_L_C,	TEMP			// Invert register
0000e8 fa23                      		BST DMX_ADDRESS_L_C,	PB3				// Copy DMX address PB3 to T
0000e9 f830                      		BLD DMX_ADDRESS_H_C,	0				// Copy T to DMX_ADDRESS_H_C bit 0
0000ea b02f                      		IN DMX_ADDRESS_L_C,	PINA				// Read DMX address bit 0-7 from DIP switch
0000eb 2628                      		EOR DMX_ADDRESS_L_C,	TEMP			// Invert register
0000ec 1020                      		CPSE DMX_ADDRESS_L_C,	DMX_ADDRESS_L	// Compare new address LSB with set address
0000ed cfb5                      			RJMP loop								// Jump back to loop if address LSB has changed, forcing a device reset
0000ee 1031                      		CPSE DMX_ADDRESS_H_C,	DMX_ADDRESS_H	// Compare new address MSB with set address
0000ef cfb3                      			RJMP loop								// Jump back to loop if address MSB has changed, forcing a device reset
0000f0 95a8                      		WDR										// Reset watchdog timer
0000f1 cfb1                      		RJMP loop								// Jump back to loop
                                 
                                 
                                 //****************Timer/Counter1 Compare Match A Interrupt *****************
                                 TC1CMA:
                                 	
                                 		// Check if DMX has updated since the last Interrupt, and flash the LED if update has ocoured. Turn the LED ON otherwise.	
0000f2 b6af                      		IN S_SREG,	SREG						// Save SREG
0000f3 9a3a                      		SBI PINC,	PC2							// Toggle LED
0000f4 ff02                      		SBRS FLAGS,	LEDT						// Check DMX status for LED toggle
0000f5 9a4a                      			SBI PORTC, PC2							// Turn LED ON
0000f6 7f0b                      		CBR FLAGS,	1<<LEDT						// Clear LEDT flag
0000f7 beaf                      		OUT SREG,	S_SREG						// Restore SREG
0000f8 9518                      		RETI									// Exit interrupt
                                 
                                 
                                 //***************************DMX Input Interrupt****************************
                                 DMX_INTERRUPT:
                                 
                                 		// Get Data from the UART, check if special DMX condition has ocoured. Save the recived DMX Data to RAM starting from 0x0100 with the first DMX channel selected by the DIP Switch. Toggle the LED if valid DMX Frames are recived.
0000f9 9170 0079                 		LDS TEMP_I,	UCSR1A						// Load data from UCSR1A to TEMP_I register
0000fb 9060 0073                 		LDS	DMX_DATA,	UDR1					// Load data from USART data register to DMX_DATA register
0000fd b6af                      		IN S_SREG,	SREG						// Save SREG
0000fe fd73                      		SBRC TEMP_I,	DOR1					// Check dataoverrun flag
0000ff c015                      			RJMP SKIPNEXT							// Jump to SKIPNEXT if dataoverrunn occoured (drop current DMX frame, as dataoverruns should never happen)
000100 fd74                      		SBRC TEMP_I,	FE1						// Chek frameerror flag
000101 c016                      			RJMP FRAMEERROR							// Jump to FRAMEERROR if frameerror occoured (marks the beginning of a new DMX frame) 
000102 ff00                      		SBRS FLAGS,	DSNB						// Check DMX status for skip next flag
000103 c011                      			RJMP SKIPNEXT							// Jump to SKIPNEXT
000104 fd01                      		SBRC FLAGS,	DRSB						// Check DMX status for startbyte
000105 c019                      			RJMP	STARTBYTE						// Jump to STARTBYTE
000106 6004                      		SBR FLAGS,	1<<LEDT						// Set flag to toggle the LED
000107 1450                      		CP DMX_BYTE_L,	DMX_ADDRESS_L			// Check DMX address MSB
000108 0441                      		CPC DMX_BYTE_H,	DMX_ADDRESS_H			// Check DMX address LSB
000109 f030                      			BRLO ADDRESSLOW							// Jump to ADDRESSLOW if DMX byte is below DMX address 
00010a fc41                      		SBRC DMX_BYTE_H,	1					// Check if all 512 bytes have been recived
00010b c009                      			RJMP SKIPNEXT							// Jump to SKIPNEXT if all 512 bytes have been recived. (should never happen to recive more than 512 bytes)
00010c 33e0                      		CPI ZL,	NUM_CH*2						// Check if all used channels have been recived
00010d f041                      			BREQ ADDRESSOVER						// Jump to ADDRESSOVER if all necessarry channels have been recived
                                 	.if PMXMODE == 7						// If 7 Bit mode active
00010e 9466                      		LSR DMX_DATA							// Drop the last databit if device is running in 7 bit mode to avoid unecesarry PMX updates if only bit 0 changed
                                 	.endif
00010f 9261                      		ST Z+, DMX_DATA								// Copy DMX_DATA to RAM and increment Z pointer
                                 
                                 	ADDRESSLOW:
                                 		// Increment the DMX_BYTE
000110 9453                      		INC DMX_BYTE_L							// Increment DMXBYTE L by 1
000111 f409                      			BRNE		NINCDMXH						// Jump to NINCDMXH when DMX_BYTE_L hasn't overflown
000112 9443                      		INC DMX_BYTE_H							// Increment DMXBYTE H by 1
                                 	NINCDMXH:
000113 beaf                      		OUT SREG,	S_SREG						// Restore SREG
000114 9518                      		RETI									// Exit Interrupt
                                 
                                 	SKIPNEXT:
                                 		// Drop recived data until next DMX Frame starts
000115 7f0e                      		CBR FLAGS,	1<<DSNB						// Clear FLAGSATUS to skip til next frameerror
                                 	ADDRESSOVER:
000116 beaf                      		OUT SREG,	S_SREG						// Restore SREG
000117 9518                      		RETI									// Exit interrupt
                                 
                                 	FRAMEERROR:
                                 		// Reset X Pointer & DMX_BYTE counter. Set DMX status to check the startbyte on the next interrupt
000118 e0e0                      		LDI ZL,	0x00							// Reset DMXADRESS LSB
000119 e0f1                      		LDI ZH, 0x01							// Reset DMXADRESS MSB
00011a 2455                      		CLR DMX_BYTE_L							// Reset DMXBYTE LSB
00011b 2444                      		CLR DMX_BYTE_H							// Reset DMXBYTE MSB
00011c 6003                      		SBR FLAGS,	1<<DRSB	| 1<<DSNB			// Set DMX Skip Next Byte & DMX Read Start Byte flag to check startbyte on next interrupt
00011d beaf                      		OUT SREG,	S_SREG						// Restore SREG
00011e 9518                      		RETI									// Exit Interrupt
                                 
                                 	STARTBYTE:
                                 		// Check if recived startbit is valid (zero). Otherwise drop the incoming DMX Frame.
00011f 1064                      		CPSE DMX_DATA,	DMX_BYTE_H				// Check startbit
000120 cff4                      			RJMP SKIPNEXT							// Jump to SKIPNEXT if startbit is not 0
000121 7f0d                      		CBR FLAGS,	1<<DRSB						// Clear DMX Read Start Byte flag
000122 beaf                      		OUT SREG,	S_SREG						// Restore SREG
000123 9518                      		RETI									// Exit interrupt
                                 		
                                 			
                                 //**************************PMX1 Output Interrupt***************************
                                 PMX1_INTERRUPT:
                                 
                                 		// Check if in address, data or page phase of PMX transfer
000124 b6af                      		IN S_SREG,	SREG						// Save SREG
000125 fd11                      		SBRC PMX_FLAGS,	AOD1					// Check if address flag is set 
000126 c007                      			RJMP PMX1_DATA_SEND						// Jump to PMX1_DATA if flag is set
000127 6012                      		SBR PMX_FLAGS,	1<<AOD1					// Set Address or Data Byte PMX1 flag
000128 6820                      		SBR PMX1_ADDRESS, 1<<7					// Set address bit
000129 fd12                      		SBRC PMX_FLAGS,	PAGE1					// Check if page flag is set 
00012a ef29                      			LDI PMX1_ADDRESS,	249					// Send page command
00012b bd20                      		OUT UDR0, PMX1_ADDRESS					// Output PMX1_ADDRESS
00012c beaf                      		OUT SREG, S_SREG						// Restore SREG
00012d 9518                      		RETI									// Exit interrupt
                                 
                                 	PMX1_DATA_SEND:
                                 		// Send PMX Data. In 8 bit mode databit 0 is checked and a additional databit is transmitted in the next interrupt if bit was HIGH
                                 	.if PMXMODE == 7						// If 7 bit mode active
00012e 2dc7                      		MOV YL,	PMX1_DATA						// Copy RAM address into address pointer
00012f 8078                      		LD PMX1_DATA,	Y						// Get data from RAM
000130 fd12                      		SBRC PMX_FLAGS,	PAGE1					// Check if PMX1 page flag is set 
000131 2477                      			CLR PMX1_DATA							// Send Page 0
000132 7f18                      		CBR PMX_FLAGS,	1<<AOD1 | 1<<UPX1 |	1<<PAGE1// Clear Address or Data Byte PMX1, Update PMX1 and Send Page PMX1 flag
000133 bc70                      		OUT UDR0,	PMX1_DATA					// Output PMX1_DATA
000134 beaf                      		OUT SREG,	S_SREG						// Restore SREG
000135 9518                      		RETI									// Exit interrupt
                                 
                                 	.else									// If 8 bit mode active
                                 	.endif
                                 
                                 
                                 //**************************PMX2 Output Interrupt***************************
                                 PMX2_INTERRUPT:
                                 
                                 		// Check if in first or second part of UART transfer
000136 fd03                      		SBRC FLAGS,	USIS						// Check USI State
000137 c02a                      			RJMP USISEND2							// Jump to USISEND2 if flag is set
                                 
                                 		// Check if in address, data or page phase of PMX transfer
000138 b6af                      		IN S_SREG,	SREG						// Save SREG
000139 fd15                      		SBRC PMX_FLAGS,	AOD2					// Check if address flag is set 
00013a c007                      			RJMP PMX2_DATA_SEND						// Jump to PMX2_DATA if flag is set
00013b 6210                      		SBR PMX_FLAGS,	1<<AOD2					// Set Address or Data Byte PMX2 flag
00013c 6830                      		SBR PMX2_ADDRESS,	1<<7				// Set address bit
00013d 5138                      		SUBI PMX2_ADDRESS,	NUM_CH				// Subtract channel offset
00013e fd16                      		SBRC PMX_FLAGS,	PAGE2					// Check if page flag is set 
00013f ef39                      			LDI PMX2_ADDRESS,	249					// Send page command
000140 2f73                      		MOV TEMP_I,	PMX2_ADDRESS				// Copy data to TEMP_I for output
000141 c007                      		RJMP USISEND1							// Jump to USISEND1
                                 
                                 	PMX2_DATA_SEND:
                                 		// Send PMX Data. In 8 bit mode databit 0 is checked and a additional databit is transmitted in the next interrupt if bit was HIGH
                                 	.if PMXMODE == 7						// If 7 bit mode active
000142 2dc8                      		MOV YL,	PMX2_DATA						// Copy RAM address into address pointer
000143 8088                      		LD PMX2_DATA,	Y						// Get data from RAM
000144 fd16                      		SBRC PMX_FLAGS,	PAGE2					// Check if PMX2 page flag is set 
000145 2488                      			CLR PMX2_DATA							// Send Page 0
000146 781f                      		CBR PMX_FLAGS,	1<<AOD2 | 1<<UPX2 |	1<<PAGE2// Clear Address or Data Byte PMX2, Update PMX2 and Send Page PMX2 flag
000147 2d78                      		MOV TEMP_I, 	PMX2_DATA				// Copy data to TEMP_I for output
000148 c000                      		RJMP USISEND1							// Jump to USISEND1
                                 
                                 
                                 	.else									// If 8 bit mode active
                                 	.endif
                                 
                                 
                                 	USISEND1:
                                 		// Load the startbit, add databits 0-5 in flipped bitorder and output it to the USI. Prepare the stopbit and databit 5-7 in flipped bit order. Set the USI to output 6 bits
000149 2799                      		CLR USI_DAT									// Clear USI_DAT
00014a 6008                      		SBR FLAGS,	1<<USIS							// Set USI sate flag
00014b fb70                      		BST TEMP_I,	0								// Copy TEMP_I bit 0 to T
00014c f996                      		BLD USI_DAT,	6							// Copy T to USI_DAT bit 6
00014d fb71                      		BST TEMP_I,	1								// Copy TEMP_I bit 1 to T
00014e f995                      		BLD USI_DAT,	5							// Copy T to USI_DAT bit 5
00014f fb72                      		BST TEMP_I,	2								// Copy TEMP_I bit 2 to T
000150 f994                      		BLD USI_DAT,	4							// Copy T to USI_DAT bit 4
000151 fb73                      		BST TEMP_I,	3								// Copy TEMP_I bit 3 to T
000152 f993                      		BLD USI_DAT,	3							// Copy T to USI_DAT bit 3
000153 fb74                      		BST TEMP_I,	4								// Copy TEMP_I bit 4 to T
000154 f992                      		BLD USI_DAT,	2							// Copy T to USI_DAT bit 2
000155 fb75                      		BST TEMP_I,	5								// Copy TEMP_I bit 5 to T
000156 f991                      		BLD USI_DAT,	1							// Copy T to USI_DAT bit 1
000157 bd9c                      		OUT USIDR,	USI_DAT							// Output USI_DAT to USIDR
000158 e494                      		LDI USI_DAT,	1<<USIOIF | 4				// Reset USI Overflow Flag & Set USI Counter to 4
000159 bd9b                      		OUT USISR,	USI_DAT							// Reset USI Overflow Flag & Set USI Counter to 4
00015a e190                      		LDI USI_DAT,	0x10						// Load Stopbit into USI_DAT
00015b f997                      		BLD USI_DAT,	7							// Copy T to USI_DAT bit 7
00015c fb76                      		BST TEMP_I,	6								// opy TEMP_I bit 6 to T
00015d f996                      		BLD USI_DAT,	6							// Copy T to USI_DAT bit 6
00015e fb77                      		BST TEMP_I,	7								// Copy TEMP_I bit 7 to T
00015f f995                      		BLD USI_DAT,	5							// Copy T to USI_DAT bit 5
000160 beaf                      		OUT SREG,	S_SREG							// Restore SREG
000161 9518                      		RETI										// Exit interrupt	
                                 	
                                 	
                                 	USISEND2:
                                 		// Output prepared data to the USI. Set the USI to output 6 bits if USI interrupt was on a rising clock edge. Add a extra half bit otherwise to correct the clockpase.
000162 7f07                      		CBR FLAGS,	1<<USIS							// Reset USI state flag
000163 bd9c                      		OUT USIDR,	USI_DAT							// Output USI_DAT to USIDR
000164 e498                      		LDI USI_DAT,	1<<USIOIF | 8				// Reset USI Overflow Flag & Set USI Counter to 8
000165 9b39                      		SBIS PINC,	PC1								// Check clock phase
000166 e499                      			LDI USI_DAT,	1<<USIOIF | 9				// Correct clock phase (Interrupt on rising edge, output on falling edge)
000167 bd9b                      		OUT USISR,	USI_DAT							// Reset USI Overflow Flag & Set USI Counter to 8/9
000168 beaf                      		OUT SREG,	S_SREG							// Restore SREG
000169 9518                      		RETI										// Exit interrupt
                                 
                                 
                                 //******************************Programm End *******************************
                                 
                                 .org FLASHEND-9
001ff6 4d44
001ff7 3258
001ff8 4d50
001ff9 2058
001ffa 3156
001ffb 6220
001ffc 2079
001ffd 6147
001ffe 7362
001fff 6527                      .db "DMX2PMX V1 by Gabs'e"
                                 
                                 .if NUM_CH > 120 | NUM_CH < 1
                                 .endif
                                 
                                 .if PMXMODE == 7
C:\Users\gabse\Documents\Projekte\DMX2PMX\FW_V2\DMX2PMX\main.asm(621): Assembling in 7 Bit Mode.
                                 .message "Assembling in 7 Bit Mode."
                                 
                                 .elif PMXMODE == 8
                                 .else
                                 .endif
                                 
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATtiny1634" register use summary:
x  :   6 y  :   2 z  :   2 r0 :   8 r1 :   4 r2 :   7 r3 :   3 r4 :   6 
r5 :   4 r6 :   5 r7 :   7 r8 :   7 r9 :   1 r10:  14 r11:   3 r12:   4 
r13:   1 r14:   1 r15:   1 r16:  12 r17:  19 r18:   9 r19:  10 r20:   6 
r21:   6 r22:   7 r23:  14 r24:  59 r25:  19 r26:  15 r27:   6 r28:   3 
r29:   2 r30:   5 r31:   5 
Registers used: 35 out of 35 (100.0%)

"ATtiny1634" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   0 adiw  :   0 and   :   0 
andi  :   0 asr   :   0 bclr  :   0 bld   :  11 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :   7 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :   5 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :  10 call  :   0 cbi   :   1 cbr   :   6 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :  42 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   3 cpc   :   1 
cpi   :   9 cpse  :   3 dec   :   2 eor   :   4 icall :   0 ijmp  :   0 
in    :   8 inc   :  10 jmp   :   0 ld    :   6 ldd   :   0 ldi   :  36 
lds   :   2 lpm   :   0 lsl   :   0 lsr   :   1 mov   :  17 movw  :   0 
neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  28 pop   :   0 
push  :   0 rcall :   0 ret   :   0 reti  :   9 rjmp  :  25 rol   :   0 
ror   :   0 sbc   :   0 sbci  :   0 sbi   :   8 sbic  :   0 sbis  :   1 
sbiw  :   0 sbr   :  13 sbrc  :  13 sbrs  :   2 sec   :   0 seh   :   0 
sei   :   1 sen   :   0 ser   :   3 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   4 std   :   0 sts   :  10 
sub   :   0 subi  :   1 swap  :   0 tst   :   0 wdr   :   1 
Instructions used: 35 out of 107 (32.7%)

"ATtiny1634" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x004000    636     20    656   16384   4.0%
[.dseg] 0x000100 0x000100      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     256   0.0%

Assembly complete, 0 errors, 0 warnings
